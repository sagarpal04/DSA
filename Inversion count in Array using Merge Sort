Input: arr[] = {8, 4, 2, 1}
Output: 6
Explanation: Given array has six inversions: (8, 4), (4, 2), (8, 2), (8, 1), (4, 1), (2, 1).
#include<iostream>
using namespace std;
int merge(int *arr, int s, int e){
    int cnt = 0;
    int mid = s + (e - s)/2;
    int len1 = mid - s + 1;
    int len2 = e - mid;
    int *first = new int[len1];
    int *second = new int[len2];
    int k = s;
    for(int i = 0; i < len1; i++){
        first[i] = arr[k++];
    }
    k = mid + 1;
    for(int i = 0; i < len2; i++){
        second[i] = arr[k++];
    }
    int index1 = 0;
    int index2 = 0;
    k = s;
    while(index1 < len1 && index2 < len2){
        if(first[index1] < second[index2]){
            arr[k++] = first[index1++];
        }
        else{
            cnt += len1 - index1;
            arr[k++] = second[index2++];
        }
    }
    while(index1 < len1){
        arr[k++] = first[index1++];
    }
    while(index2 < len2){
        arr[k++] = second[index2++];
    }
    delete [] first;
    delete [] second;
    return cnt;
}
int mergesort(int *arr, int s, int e, int &cnt){
    if(s >= e){
        return 0;
    }
    int mid = s + (e - s)/2;
    mergesort(arr, s, mid, cnt);
    mergesort(arr, mid + 1, e, cnt);
    cnt += merge(arr, s, e);
    return cnt;
}
int main(){
    int arr[5] = {8, 4, 2, 1};
    int n = 4;
    int cnt = 0;
    cout << mergesort(arr, 0, n - 1, cnt) << endl;
    for(int i = 0; i < n; i++){
        cout << arr[i] << " ";
    }
    return 0;
}
